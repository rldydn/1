package Projectteam;

import java.util.Scanner;

/*
 * 이곳은 정규직 관리 클래스 입니다.
 * 정규직 직원에 대한 데이터 입력을 담당합니다.
 */
public class RegularManagement implements ManagementSystem {
	private RegularEmployee[] re; // 정규직직원클래스
	private SalaryManagement sm; // 급여관리클래스
	private int numOfRegular; // 정규직 최대 인원수
	private int empCount; // 입력받을 직원 수
	private int empIndex; // 현재 입력받을 수 있는 reference index

	public RegularManagement() {
		this(0);
	}

	public RegularManagement(int numOfRegular) {
		this.numOfRegular = numOfRegular;

		// 사람 수 만큼 정규직 직원 생성
		re = new RegularEmployee[this.numOfRegular];
		sm = null;

		empCount = 0;
		empIndex = 0;
	}

	// setter,getter
	public RegularEmployee[] getRe() {
		return re;
	}

	public void setRe(RegularEmployee[] re) {
		this.re = re;
	}

	public SalaryManagement getSm() {
		return sm;
	}

	public long getSalary(RegularEmployee re) {
		this.sm = new SalaryManagement(re);
		this.sm.putOnRecord();
		return this.sm.getRealSalary();
	}

	public void setNumOfRegular(int numOfRegular) {
		this.numOfRegular = numOfRegular;
	}

	public int getNumOfRegular() {
		return numOfRegular;
	}

	@Override
	public void input() {
		// TODO Auto-generated method stub

	}

	@Override
	public void modifi() {
		// TODO Auto-generated method stub

	}

	@Override
	public void delete() {
		// TODO Auto-generated method stub

	}

	@Override
	public void search() {
		// TODO Auto-generated method stub

	}

	@Override
	public void allOutput() {
		// TODO Auto-generated method stub

	}


	// 입력
	public void input1() {

		Scanner sc = new Scanner(System.in);

		if (empIndex == numOfRegular) { // 입력을 다 하였을 경우..
			System.out.println("더 이상 입력할 수 없습니다.");
		} else {
			System.out.print("정규직 직원 몇명 입력하시겠어요? ");
			this.empCount = sc.nextInt(); // 입력받을 직원 수
			System.out.println();

			if (empCount + empIndex > numOfRegular) {
				System.out.println("입력할 수 있는 범위를 초과하였습니다..");
				System.out.println("다시 시도해주세요..");
			} else {
				for (int i = 0; i < empCount; i++) {
					re[empIndex] = new RegularEmployee();

					System.out.println("정규직 " + (empIndex + 1) + "번째 직원 정보 입력");

					// 사번
					re[empIndex].setEmpNum(empIndex + 1);

					// 이름입력
					System.out.print((empIndex + 1) + "번째 직원 이름 입력 : ");
					String name = sc.next();
					System.out.println();

					// 나이입력
					System.out.print((empIndex + 1) + "번째 직원 나이 입력 : ");
					int age = sc.nextInt();
					System.out.println();

					// 생년월일
					System.out.print((empIndex + 1) + "번째 직원 생년월일 입력(YYYY-MM-DD) : ");
					String birth = sc.next();
					System.out.println();

					// 주소
					System.out.print((empIndex + 1) + "번째 직원 주소 입력 : ");
					String address = sc.next();
					System.out.println();

					// 연락처
					System.out.print((empIndex + 1) + "번째 직원 연락처 입력 : ");
					String tel = sc.next();
					System.out.println();

					// 이메일 입력
					System.out.print((empIndex + 1) + "번째 직원 이메일 입력 : ");
					String email = sc.next();
					System.out.println();

					// 은행명 입력
					System.out.print((empIndex + 1) + "번째 직원 은행명 입력 : ");
					String bankName = sc.next();
					System.out.println();

					// 계좌 입력
					System.out.print((empIndex + 1) + "번째 직원 계좌 입력 : ");
					String account = sc.next();
					System.out.println();

					// 개인정보 입력
					re[empIndex].setPersonalInfo(name, age, birth, address, tel, email, bankName, account);

					// 직책 입력
					int pos = 0;
					do {
						System.out.println((empIndex + 1) + "번째 직원 해당되는 직책 번호를 선택하세요");
						System.out.println("1.신입사원  2.사원  3.대리  4.과장  5.팀장  6.차장  7.부장  8.전무  9.이사  10.대표이사");
						System.out.print("-> ");
						pos = sc.nextInt();
					} while ((pos >= 1 && pos <= 10) == false); // 직책 선택을 잘못 했을 경우
					re[empIndex].setPosition();
					System.out.println();

					// 소속팀 입력
					System.out.print((empIndex + 1) + "번째 직원 소속팀 입력 : ");
					re[empIndex].setTeam(sc.next());
					System.out.println();

					// 소속부서 입력
					System.out.print((empIndex + 1) + "번째 직원 소속부서 입력 : ");
					re[empIndex].setDept(sc.next());
					System.out.println();

					// 입사년도 입력
					System.out.print((empIndex + 1) + "번째 직원 입사년도 입력(YYYY) : ");
					re[empIndex].setYear(sc.nextInt());
					System.out.println();

					// 비밀번호 입력
					System.out.print((empIndex + 1) + "번째 직원 비밀번호 입력 : ");
					re[empIndex].setPassword(sc.next());
					System.out.println();

					// 사용자에게 입력받을 필요가 없는 부분 등록..
					// 급여등록 : 직책으로 급여계산
					long salary = this.getSalary(re[empIndex]); // 급여관리 클래스에서 실급여 계산하고 salary변수에 입력
					re[empIndex].setSalary(salary); // 입력된 급여를 해당 직원 급여에 입력

					empIndex++;
				}
			}
		}
	}


// 수정
public void modifi1() { // 이름검색

    Scanner sc = new Scanner(System.in);

    if (empIndex == 0) {

        System.out.println("직원정보가 없습니다.");
    } else {

        System.out.print("검색하고 싶은 직원 이름을 입력하세요 : ");
        String tmpName = sc.next();

        boolean exist = true;

        for (int i = 0; i < empIndex; i++) {
            if (re[i].getPersonalInfo().getName().equals(tmpName)) {

                System.out.println("수정하고 싶은 데이터를 선택하세요..");
                System.out.println("1.이름  2.나이  3.생일  4.주소 5.전화번호  6.이메일  7.은행명  8.계좌");
                System.out.println("9.직책  10.소속팀  11.소속부서 12.근속년도  13.비밀번호");
                System.out.print("-> ");
                int num = sc.nextInt(); // 번호 선택

                String sTmp = "";
                int iTmp = 0;
                long salary = 0;

                switch (num) {
                case 1: // 이름수정
                    System.out.print("수정할 데이터를 입력하세요 : ");
                    sTmp = sc.next();
                    re[i].getPersonalInfo().setName(sTmp);
                    break;
                case 2: // 나이 수정
                    System.out.print("수정할 데이터를 입력하세요 : ");
                    iTmp = sc.nextInt();
                    re[i].getPersonalInfo().setAge(iTmp);
                    break;
                case 3: // 생년월일수정
                    System.out.print("수정할 데이터를 입력하세요 : ");
                    sTmp = sc.next();
                    re[i].getPersonalInfo().setBirth(sTmp);
                    break;
                case 4: // 주소 수정
                    System.out.print("수정할 데이터를 입력하세요 : ");
                    sTmp = sc.next();
                    re[i].getPersonalInfo().setAddress(sTmp);
                    break;
                case 5: // 전화번호 수정
                    System.out.print("수정할 데이터를 입력하세요 : ");
                    sTmp = sc.next();
                    re[i].getPersonalInfo().setTel(sTmp);
                    break;
                case 6: // 이메일 수정
                    System.out.print("수정할 데이터를 입력하세요 : ");
                    sTmp = sc.next();
                    re[i].getPersonalInfo().setEmail(sTmp);
                    break;
                case 7: // 은행명 수정
                    System.out.print("수정할 데이터를 입력하세요 : ");
                    sTmp = sc.next();
                    re[i].getPersonalInfo().setBankName(sTmp);
                    break;
                case 8: // 계좌 수정
                    System.out.print("수정할 데이터를 입력하세요 : ");
                    sTmp = sc.next();
                    re[i].getPersonalInfo().setAccount(sTmp);
                    break;
                case 9: // 직책수정
                    int pos = 0;
                    do {
                        System.out.println("수정할 데이터를 입력하세요 : ");
                        System.out.println("1.신입사원  2.사원  3.대리  4.과장  5.팀장  6.차장  7.부장  8.전무  9.이사  10.대표이사");
                        System.out.print("-> ");
                        pos = sc.nextInt();
                    } while ((pos >= 1 && pos <= 10) == false); // 직책 선택을 잘못 했을 경우
                    re[i].setPosition();
                    // 급여등록 -> 직책이 수정되면 insentive가 바뀌므로...
                    salary = this.getSalary(re[i]); // 급여관리 클래스에서 실급여 계산하고 salary변수에 입력
                    re[i].setSalary(salary); // 입력된 급여를 해당 직원 급여에 입력
                    break;
                case 10: // 팀 수정
                    System.out.print("수정할 데이터를 입력하세요 : ");
                    sTmp = sc.next();
                    re[i].setTeam(sTmp);
                    break;
                case 11: // 부서 수정
                    System.out.print("수정할 데이터를 입력하세요 : ");
                    sTmp = sc.next();
                    re[i].setDept(sTmp);
                    break;
                case 12: // 근속년도 수정
                    System.out.print("수정할 데이터를 입력하세요 : ");
                    iTmp = sc.nextInt();
                    re[i].setYear(iTmp);
                    // 급여등록 -> 근속년도가 수정되면 basicSalary가 바뀌므로...
                    salary = this.getSalary(re[empIndex]); // 급여관리 클래스에서 실급여 계산하고 salary변수에 입력
                    re[i].setSalary(salary); // 입력된 급여를 해당 직원 급여에 입력
                    break;
                case 13: // 비밀번호 수정
                    System.out.print("수정할 데이터를 입력하세요 : ");
                    sTmp = sc.next();
                    re[i].setPassword(sTmp);
                    break;
                default:
                    System.out.println("잘못 입력하였습니다.");
                }
                exist = true;
                System.out.println();
                System.out.println("수정완료!!");
            }
            if (!exist)
                System.out.println("검색하신 " + tmpName + " 직원에 대한 정보가 없습니다.");

        }
    }
}


// 삭제
public void delete1() {

    Scanner sc = new Scanner(System.in);

    if (empIndex == 0) {

        System.out.println("직원정보가 없습니다.");
    } else {

        System.out.print("삭제할 직원의 이름을 입력하세요 : ");
        String tmpName = sc.next();

        boolean exist = false;

        for (int i = 0; i < empIndex; i++) {
            if (re[i].getPersonalInfo().getName().equals(tmpName)) {
                re[i] = null;
                exist = true;
            }
            System.out.println("삭제완료!!");
        }
        if (!exist)
            System.out.println("검색하신 " + tmpName + " 직원에 대한 정보가 없습니다.");
    }
}

// 검색
public void search1() { // 이름 검색

    Scanner sc = new Scanner(System.in);

    if (empIndex == 0) {

        System.out.println("직원정보가 없습니다.");
    } else {

        System.out.print("검색하고 싶은 직원 이름을 입력하세요 : ");
        String tmpName = sc.next();

        boolean exist = false;

        for (int i = 0; i < empIndex; i++) {
            if (re[i].getPersonalInfo().getName().equals(tmpName)) {
                disp(re[i]);

                exist = true;
            }
        }
        if (!exist)
            System.out.println("검색하신 " + tmpName + " 직원에 대한 정보가 없습니다.");

        exist = !exist;
    }
}

// 출력
public void allOutput1() {

    if (empIndex == 0) {

        System.out.println("직원정보가 없습니다.");
    } else {

        System.out.println("-----------------------------------");
        System.out.println("----------정규직 직원 전체 출력----------");
        System.out.println("-----------------------------------");

        for (int i = 0; i < empIndex; i++) {
            if (re[i] != null) {
                System.out.println((i + 1) + "번째 직원 출력");
                disp(re[i]);
            }
        }
    }
}

public void userSearch(String num, String password) { // 사용자에서 사번과 이름을 받아옴

    if (empIndex == 0) {
        System.out.println("직원정보가 없습니다.");
    } else {
        for (int i = 0; i < empIndex; i++) {
            if (re[i] != null) {
                if (re[i].getEmpNum().equals(num) && re[i].getPassword().equals(password))
                    disp(re[i]);
            }
        }
    }
}

public void disp(RegularEmployee re) {
    System.out.println("----------------------------------------");
    System.out.println("사번 : " + re.getEmpNum()); // 사번
    // 직원 개인정보 출력
    System.out.println("이름 : " + re.getPersonalInfo().getName()); // 이름
    System.out.println("나이 : " + re.getPersonalInfo().getAge()); // 나이
    System.out.println("연락처 : " + re.getPersonalInfo().getBirth()); // 연락처
    System.out.println("주소 : " + re.getPersonalInfo().getAddress()); // 주소
    System.out.println("전화번호 : " + re.getPersonalInfo().getTel()); // 전화번호
    System.out.println("이메일 : " + re.getPersonalInfo().getEmail()); // 이메일
    System.out.println("은행명 : " + re.getPersonalInfo().getBankName()); // 은행명
    System.out.println("계좌번호 : " + re.getPersonalInfo().getAccount()); // 계좌번호
    System.out.println("직책 : " + re.getPosition()); // 직책
    System.out.println("소속팀 : " + re.getTeam()); // 소속팀
    System.out.println("소속부서 : " + re.getDept()); // 소속부서
    System.out.println("급여 : " + re.getSalary()); // 급여
    System.out.println("근속년도 : " + re.getYear()); // 근속년도
    System.out.println("----------------------------------------");
}
}



